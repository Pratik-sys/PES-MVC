//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PESMVC.Data.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PES_TestEntities : DbContext
    {
        public PES_TestEntities()
            : base("name=PES_TestEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminLoginCredential> AdminLoginCredentials { get; set; }
        public virtual DbSet<CustomerLoginCredential> CustomerLoginCredentials { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Endorsement> Endorsements { get; set; }
        public virtual DbSet<InsuranceProduct> InsuranceProducts { get; set; }
        public virtual DbSet<Policy> Policies { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<EndorsementStatu> EndorsementStatus { get; set; }
    
        public virtual int createInsuranceProduct(string productName, string productLine)
        {
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("productLine", productLine) :
                new ObjectParameter("productLine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("createInsuranceProduct", productNameParameter, productLineParameter);
        }
    
        public virtual int deleteInsuranceProduct(string insuranceId)
        {
            var insuranceIdParameter = insuranceId != null ?
                new ObjectParameter("insuranceId", insuranceId) :
                new ObjectParameter("insuranceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteInsuranceProduct", insuranceIdParameter);
        }
    
        public virtual ObjectResult<InsuranceProduct> getAllInsuranceProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsuranceProduct>("getAllInsuranceProduct");
        }
    
        public virtual ObjectResult<InsuranceProduct> getAllInsuranceProduct(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsuranceProduct>("getAllInsuranceProduct", mergeOption);
        }
    
        public virtual ObjectResult<InsuranceProduct> getInsuranceProductById(string insuranceId)
        {
            var insuranceIdParameter = insuranceId != null ?
                new ObjectParameter("insuranceId", insuranceId) :
                new ObjectParameter("insuranceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsuranceProduct>("getInsuranceProductById", insuranceIdParameter);
        }
    
        public virtual ObjectResult<InsuranceProduct> getInsuranceProductById(string insuranceId, MergeOption mergeOption)
        {
            var insuranceIdParameter = insuranceId != null ?
                new ObjectParameter("insuranceId", insuranceId) :
                new ObjectParameter("insuranceId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InsuranceProduct>("getInsuranceProductById", mergeOption, insuranceIdParameter);
        }
    
        public virtual int updateInsuranceProduct(string productId, string productName, string productLine)
        {
            var productIdParameter = productId != null ?
                new ObjectParameter("productId", productId) :
                new ObjectParameter("productId", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("productName", productName) :
                new ObjectParameter("productName", typeof(string));
    
            var productLineParameter = productLine != null ?
                new ObjectParameter("productLine", productLine) :
                new ObjectParameter("productLine", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateInsuranceProduct", productIdParameter, productNameParameter, productLineParameter);
        }
    
        public virtual ObjectResult<string> createCustomer(string custName, string custAddress, string custTelephone, string custGender, Nullable<System.DateTime> custDOB, Nullable<bool> custSmoker, string custHobbies, ObjectParameter custId)
        {
            var custNameParameter = custName != null ?
                new ObjectParameter("custName", custName) :
                new ObjectParameter("custName", typeof(string));
    
            var custAddressParameter = custAddress != null ?
                new ObjectParameter("custAddress", custAddress) :
                new ObjectParameter("custAddress", typeof(string));
    
            var custTelephoneParameter = custTelephone != null ?
                new ObjectParameter("custTelephone", custTelephone) :
                new ObjectParameter("custTelephone", typeof(string));
    
            var custGenderParameter = custGender != null ?
                new ObjectParameter("custGender", custGender) :
                new ObjectParameter("custGender", typeof(string));
    
            var custDOBParameter = custDOB.HasValue ?
                new ObjectParameter("custDOB", custDOB) :
                new ObjectParameter("custDOB", typeof(System.DateTime));
    
            var custSmokerParameter = custSmoker.HasValue ?
                new ObjectParameter("custSmoker", custSmoker) :
                new ObjectParameter("custSmoker", typeof(bool));
    
            var custHobbiesParameter = custHobbies != null ?
                new ObjectParameter("custHobbies", custHobbies) :
                new ObjectParameter("custHobbies", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("createCustomer", custNameParameter, custAddressParameter, custTelephoneParameter, custGenderParameter, custDOBParameter, custSmokerParameter, custHobbiesParameter, custId);
        }
    
        public virtual int deleteCustomer(string cId)
        {
            var cIdParameter = cId != null ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteCustomer", cIdParameter);
        }
    
        public virtual ObjectResult<Customer> getAllCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getAllCustomers");
        }
    
        public virtual ObjectResult<Customer> getAllCustomers(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getAllCustomers", mergeOption);
        }
    
        public virtual ObjectResult<Customer> getCustomerById(string cId)
        {
            var cIdParameter = cId != null ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getCustomerById", cIdParameter);
        }
    
        public virtual ObjectResult<Customer> getCustomerById(string cId, MergeOption mergeOption)
        {
            var cIdParameter = cId != null ?
                new ObjectParameter("cId", cId) :
                new ObjectParameter("cId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getCustomerById", mergeOption, cIdParameter);
        }
    
        public virtual ObjectResult<Customer> getCustomerByNameAndDob(string cName, Nullable<System.DateTime> cDOB)
        {
            var cNameParameter = cName != null ?
                new ObjectParameter("cName", cName) :
                new ObjectParameter("cName", typeof(string));
    
            var cDOBParameter = cDOB.HasValue ?
                new ObjectParameter("cDOB", cDOB) :
                new ObjectParameter("cDOB", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getCustomerByNameAndDob", cNameParameter, cDOBParameter);
        }
    
        public virtual ObjectResult<Customer> getCustomerByNameAndDob(string cName, Nullable<System.DateTime> cDOB, MergeOption mergeOption)
        {
            var cNameParameter = cName != null ?
                new ObjectParameter("cName", cName) :
                new ObjectParameter("cName", typeof(string));
    
            var cDOBParameter = cDOB.HasValue ?
                new ObjectParameter("cDOB", cDOB) :
                new ObjectParameter("cDOB", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer>("getCustomerByNameAndDob", mergeOption, cNameParameter, cDOBParameter);
        }
    }
}
